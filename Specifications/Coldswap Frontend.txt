/// Premise /// 
A frontend application for interacting with Coldswap contracts. 

/// Page 1 : Landing  ///
 
1a : Connect Wallet Button; 
When clicked, triggers the app to request a connection with a valid web3 wallet on the device, (does not redirect if the device has no wallet, simply fails), (cannot be updated remotely, all required wallet connect files are stored on the app), (does not automatically connect, must be clicked).   

1b : Logo; 
DXH Logo.

1c : Search/Control Panel; 
Lets the user automatically search for an NFT's Coldswap Listing based on its contract address. Alternatively lets the user specify a listing address to interact with. 

1d : Address Bar

1e : Search Button; 
Initiates interaction, begins by querying the controller address' read function "queryByAddress" then "queryByIndex", caching the first (1000) listings with the specified token contract. 

- Search Results 
Ranks listings based on NFT balance, filters out listings that have none of the listed NFT's items in their balance. 
Each result is a link, which when clicked takes the user to page-2 but with the selected listing inserted for interaction. 

If the specified address is a listing address then the frontend takes the user to page-2 with the stated listing for interaction.  

- More Button
If there are more than (999) results, then this button can be used to query again with a higher "step", presents results as stated in "Search Results", below older results. This function Loops. 

1f : Scan Button
Opens an NFTscan link with the stated NFT address. 

Clicking 1e or 1f with nothing inserted takes the user to page-3.

1g : Help Button; 
Creates a popup that says "NFT ColdSwap is a system for fractionalizing NFTs into fungible tokens. Use the search function to look up various listings. If you already have a specific listing you want to interact with; specify the address in the address field".  

1h : GitHub Link, Telegram Link, Cold Factory link. 


/// Page 2 ///

2a : Cold Fraction Menu 

2b : Listing Name;
Displays the name stored on the listing contract. Name cannot be longer than panel. 

2c : Amount Field

2d : Type Toggle 
Determines if the user is converting an NFT for its fractions or fractions for whole NFT items. 

2e : Execute Button; 
Executes a 'marketBuy' or 'marketSell' transaction with the amount specified based on the order type. 


2f : Cold Bid Menu 

2g : Item Number field; 
Allows the user to set which NFT item to buy or sell. 

For sells this first queries the user's balance for the stated NFT item, if they don't have the NFT item then throw error; "NFT item not found". 

2h : Amount; 
Allows the user to set how much [NATIVE] or [TOKEN] they are expecting to buy with or sell for. 

- FFT Address 
Allows the user to state which FFT they expect to get or give in exchange for the stated item. Typing "0" or "MATIC" prepares a transaction for [NATIVE].

2i : Order Type; 
Determines if they are buying or selling the specified item in 2g. 

2j : Execute Button; 
Executes a 'bidBuy' or 'AskSell' transaction with the amount specified based on the details in 2g to 2i. 

Produces an NFTscan link of the transaction. 
 
2k : List button;
Presents page-3.  

2l : LP button; 
Presents page-4 with the listing's NFT set for interaction. 

2m : Exit Button; 
Closes the menu, returns to page-1. 

2n : Active Bids/Asks; 
Fetches and presents the data of all existing orders on the listing contract. Each bid/ask only stores token details, no metadata. Each bid can be optionally expanded to view the image and metadata. Metadata and images are cached locally.  
Updates every (30) seconds.

Clicking on an order expands it as a closeable popup to present its IPFS metadata and image or Non-Fun Storage metadata and image [See : "EVM - Non-Fun Storage.txt"]. 

2o : Accept Button;  
Displayed next to each order, pushes a transaction for 'takeBid' or 'takeAsk' depending on the order type. 

2p : Cancel Button; 
Displayed next to each order, pushes a transaction to cancel an owned order slot. 

2q : Scroll Wheel;
Is a scroll wheel. 


/// Page 3 : Listing Menu ///
3a ; Cold Listing menu

3b ; NFT Address 

3c ; List Button;
Pushes a transaction for a Coldswap listing using the stated NFT address. 

Produces a Polygonscan link of the transaction. 

3d ; Exit Button;
Closes Page-3, returns to Page-1.

3e ; LP Button 
Takes the user to page-4 with the newly listed NFT set for interaction. Only appears when an NFT is newly listed. 

/// Page 4 : QuickSwap LP ///
(Images not included) 
4a ; Ticker; 
Displays the cold token ticker symbol. 

4b ; Amount Field (Cold); 
A field for determining how much of the fractional NFT they are depositing. 

4c ; FFT Ticker / address field; 
Is a field when no QuickSwap listed FFT is inserted. When an FFT address is inserted the frontend searches for any available pools [See : "Links"]. 
If no pools are available the frontend continues with the assumption the user wants to create a new pool. 
Queries and displays the token ticker. 

4d ; Amount Field (Cold); 
Allows the user to specify how much fractional NFT they are depositing. Acquires the token decimals and normalizes the input. 

4e; Amount Field (FFT);
Allows the user to specify how much FFT they are depositing. Gets the LP's ratio if an LP already exists. Tokens to deposit must match the existing ratio (if any). Acquires the token decimals and normalizes the input. 

4f ; Deposit Button
Pushes a transaction to either add Liquidity to an existing pool that the frontend has already queried or create a new pool with the amounts specified. 


/// Links ///
Use the following links to integrate QuickSwap LPs (same as Uniswap). 

https://github.com/thanpolas/uniswap-chain-queries 

https://github.com/Aboudoc/Uniswap-v2


/// Notes /// 
- Querying all listing and controller addresses could take a while if there are many.  
