/// Premise /// 
A frontend application for interacting with Hotswap and Coldswap contracts. 

/// Page 1 : Landing  ///
 
1a : Connect Wallet Button; 
When clicked, triggers the app to request a connection with a valid web3 wallet on the device, (does not redirect if the device has no wallet, simply fails), (cannot be updated, all required wallet connect files are stored on the app), (does not automatically connect, must be clicked).   

1b : Logo; 
DXH Logo.

1c : Search/Control Panel; 
Lets the user automatically search for an NFT's Coldswap Listing or Hotswap controller based on its contract address. Alternatively lets the user specify a controller or listing address to manually interact with. 

1d : Address Bar

1e : Search Button; 
Initiates automatic interaction, begins by querying the factory addresses' read function "pairs", starting from "0" it looks up the controller address returned and queries the "NFT" public data, if the address in "NFT" matches the address set by the user "1c" then the frontend caches the controller address with that NFT address and continues querying at the factory until there are no more slots to query.

Alternatively, if the user begins puts a controller or listing address in the address field, the frontend app will attempt to find the NFT address and proceed with the prior search operation. 

Once all controllers with the specified NFT address have be cached the frontend queries the same NFT address on the Coldswap factory using the read function "listings", caching them as well. Once all controllers and listing addresses are cached the frontend presents 2-3. 

1f : Control Button; 
Initiates manual interaction, queries the address for controller or listing contract functions, if the contract is a controller then the frontend presents 2-1, whereas if it is a listing contract the frontend presents 2-2. 
Clicking the control button with nothing inserted presents Page 3. 

1g : Help Button; 
Creates a popup that says "NFT Hot/Cold Swap is a system for instantly converting NFTs for fungible tokens and vice versa, use the search function to look up various Hot/Cold listings/controllers. If you already have a specific controller/listing you want to interact with; specify the address in the address field".  

1h : GitHub Link, Telegram Link, Cold Factory link, Hot Factories link ;
"Hot Factories Link" opens 2 urls for the 2 Hotswap Factories. 



/// Page 2-1 : Manual Interaction - Hotswap Interface ///

2-1a : Trade menu (code and assets already exist)

2-1b : price ;
Queries the stated hotswap controller, fetches the price, decimals and name, normalizes decimals, stores the value. 

Examples; price is 100000000000000000000, with 18 decimals that is 100. Stores the data as 100 [FFT name] to 1 [NFT name]. 


2-1c : Amount Field ;
Allows the user to state a number of NFTs to buy or sell. 

2-1d : Buy/sell toggle ;
Determines if the swap is for buy or sell.

2-1e : slippage field ; 
determines how much is set in "minOutput" or "maxInput" in 2-1g. 

2-1f : Cost/settlement display ;
Shows how much [FFT] the swap will cost or settle.
 
For buys price is derived directly to determine cost;

Swap amount * price = initial input
Initial input / 100 * slippage percent = added input
added input + initial input = cost 

For sells this is gotten by first calculating impact price; 

NFT swap amount * price = FFT output 
FFT Liquidity - FFT output = FFT impact 
NFT Liquidity + NFT swap amount = NFT impact 
FFT impact / NFT impact = impact price 

Then using impact price to determine settlement; 

Swap amount * impact price = initial output 
Initial output / 100 * slippage percent = lost output
initial output - lost output = settlement 


2-1g : Swap button ;
(Presents a popup to approve the NFT or FFT for trade if not already approved)
Pushes a transaction to execute the swap with the stated details. 

Slippage setting is determined for buys as; 

amount * price = swap input
swap input / 100 * slippage = delta
swap input + delta =  maxInput

Slippage setting is determined for sells as; 

NFT swap amount * price = FFT output
NFT swap amount / NFT Liquidity * 100 = impact percent 
FFT output / 100 * (slippage + impact percent) = delta
FFT output - delta =  minOutput

"slippage" is the number set in the slippage field on 2-1e.

2-1h : Liquidity menu button ;
Presents Page 4.

2-1i : Listing Menu ; 
Presents page 3.

2-1j : close button ; 
Closes the trade menu.
 

/// Page 2-2 : Manual Interaction - Coldswap Interface ///

2-2a : Cold Fraction Menu 

2-2b : Listing Name;
Displays the name stored on the listing contract. 

2-2c : Order Type toggle; 
Determines if the user is converting an NFT for its fractions or fractions for whole NFT items. 

2-2d : Amount Field

2-2e : Execute Button; 
Executes a 'marketBuy' or 'marketSell' transaction with the amount specified based on the order type. 


2-2f : Cold Bid Menu 

2-2g : Item Number field; 
Allows the user to set which NFT item to buy or sell.  

2-2h : Amount; 
Allows the user to set how much [NATIVE] they are expecting to buy with or sell for. 

2-2i : Order Type; 
Determines if they are buying or selling the specified item in 2-2g. 

2-2j : Execute Button; 
Executes a 'bidBuy' or 'Ask'sell' transaction with the amount specified based on the details in 2-2g to 2-2i. 
 
2-2k : List button;
Presents 3 

2-2l : LP button;
Presents 4

2-2m : Exit Button; 
Closes the menu, returns to page 1. 

2-2n : Active Bids/Asks; 
Fetches and presents the data of all existing orders on the listing contract. Each bid/ask only stores token details, no metadata. Each bid can be optionally expanded to view the image and metadata. Metadata and images are cached locally.  

2-2o : Accept Button;  
Pushes a transaction for 'takeBid' or 'takeAsk' depending on the order type. 

2-2p : Cancel Button; 
Pushes a transaction to cancel an owned order slot. 

2-2q : Scroll Wheel;
Is a scroll wheel. 

/// Page 2-3 : Automatic Interaction ///

2-3a : Router Menu

2-3b : Amount Field;
Allows the user to insert how much they want to swap/fractionalize, pending amount is displayed at the far right of the field. 

2-3c : Start Asset; 
A drop menu for determining what asset to start with, this can be the NFT itself or [NATIVE] or some token on Hotswap or QuickSwap.

2-3d : End Asset; 
A drop menu for determining what asset the user wants to receive, this can be the NFT itself or [NATIVE] or some token on Hotswap or QuickSwap. 

The start and end asset determine what kind of operation is carried out using the cached controller(s) and listings. The frontend router prioritizes owning a whole NFT if the estimated end amount is greater than "1", whereas if the estimated end amount is less than "1", then the frontend router prioritizes acquiring a fraction of the token if the Cold token is listed on QuickSwap, if the Cold token is not listed on QuickSwap while the end amount is less than "1", then the operations fails with an error. 

Can be used as a purely QuickSwap frontend for swapping any fungible assets. 

2-3e : Swap Button; 
Pushes a transaction to executes the details of 2-3b and 2-3c.

2-3f : Cold Bid Menu (Reprise of 2-2f to 2-2q) 



/// Page 3 : Listing Menu ///
3a ; Hot/Cold Listing menu

3b ; NFT Address 

3c ; FFT Address 

3d ; List Button ;
Pushes transaction to list the addresses set in "NFT Address" and "FFT Address", sets "0.001" in the payable field. If no FFT is set in the "FFT Address" then the frontend instead pushes a Coldswap listing using the NFT address alone. 

3e ; Exit Button ;
Closes Page 3, returns to Page 1.

/// Page 4 ///

4a ; Liquidity menu

4b ; Amount field 

4c ; FFT or NFT toggle ; 
Determines if the user is depositing the target NFT or FFT in the listing. 

4d ; Deposit button ; 
Displays a pop-up for the user to approve the FFT or NFT if enough is not approved for deposit, if already approved then it pushes a transaction for deposit using the details provided. 

4e ; Positions panel ; 
Returns all liquidity positions the user has, first shows the amount, if greater than 99999 then it displays as 1.0e5. Shows the token ticker up to 4 letters, more than 4 is displayed as "XXXX...". lastly it displays the amount of fees collected and unclaimed, if claimed this returns "N/A".  

Unclaimed fees are calculated by using the following formula from the hotswap contracts specifications; 

tVolume - dVolume = cVolume 

cVolume / tVolume = volume ratio 

volume ratio * total fees  = fees accrued 

NFT or FFT Alloc  / Total FFT or NFT Liquidity = Liquidity contribution 

(selects based on deposit type)

fees accrued * liquidity contribution = unclaimed fees 

4f ; Claim fees button ;
Pushes a transaction to claim fees on a given liquidity position. 

4g ; Withdraw button ;
Pushes a transaction to withdraw the target liquidity position. 

4h ; scroll bar

4i ; Close button ; 
returns the user to the landing page.
 

/// Notes /// 
- Querying all listing and controller addresses could take a while if there are many.  

- Coldswap doesn't deal with liquidity so there's no Coldswap liquidity menu.
